generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  userId        String    @unique @map("user_id")
  name          String?   @db.VarChar(50)
  email         String    @unique @db.VarChar(255)
  password      String
  imgUrl        String?   @map("img_url")
  role          UserRole? @default(USER)
  gender        String?   @db.VarChar(1)

  createdAt   DateTime    @default(now())@map("created_at") // Timestamp when the order was created
  updatedAt   DateTime    @updatedAt@map("updated_at") // Timestamp when the order was last updated

  carts     Cart[]
  wishlists WishList[]
  orders    Order[]
  kyc       Kyc?
}

model Product {
  id          Int    @id @default(autoincrement())
  productId   String @unique @map("product_id")
  title       String
  category    String
  description String
  price       Float
  stock       Int

  createdAt   DateTime    @default(now())@map("created_at") // Timestamp when the order was created
  updatedAt   DateTime    @updatedAt@map("updated_at") // Timestamp when the order was last updated

  carts      Cart[]
  wishlists  WishList[]
  variations Variation[]
  orders     Order[]
  Stock      Stock[]
}

model Variation {
  id              Int    @id @default(autoincrement())
  productId       String @map("product_id") // Reference to the base product
  variationId     String @unique@map("variation_id")
  color           String // Color of the variation
  size            Json   // Optional attribute
  imgUrl          Json @map("img_url")
  stock           Int

  @@unique([productId,variationId])

  wishlist    WishList[]
  product     Product    @relation(fields: [productId], references: [productId], onDelete: Cascade) // Relationship to Product
  cart        Cart[]
  order       Order[]
  Stock       Stock?
}

model Cart {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  productId   String   @map("product_id")
  variationId String   @map("variation_id")
  quantity    Int      @default(1)
  addedAt     DateTime @default(now()) @map("added_at")

  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  variation Variation @relation(fields: [variationId], references: [variationId], onDelete: Cascade)

  @@unique([userId, productId, variationId]) // Prevent duplicate entries
}

model WishList {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  productId   String   @map("product_id")
  variationId String      @map("variation_id")
  addedAt     DateTime @default(now()) @map("added_at")

  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  variation Variation @relation(fields: [variationId], references: [variationId], onDelete: Cascade)

  @@unique([userId, productId])
}

model Kyc {
  id      Int     @id @default(autoincrement())
  userId  String  @unique @map("user_id")
  idNo    String  @map("id_no")
  idUrl   String  @map("id_url")
  // bnkStmt String  @map("bnk_stmt")//bnk-stmt url
  // quantity Int
  address String
  zipcode String?
  phone   String
  email   String
  status  KycStatus  @default(PENDING)

  user User @relation(fields: [userId], references: [userId])
}

model Order {
  id                   Int           @id @default(autoincrement())
  userId               String        @map("order_id")       // Reference to the User who placed the order
  productId            String        @map("product_id")    // Reference to the product which is placed in the order
  variationId          String        @map("variation_id") // Refre to the product variation placed 
  amount               Float         // Total amount for the order
  status               OrderStatus   @default(PENDING) // Order status
  shippingAddress      String        @map("shipping_address")
  zipcode              String?
  phone                String?

  createdAt   DateTime      @default(now())@map("created_at") // Timestamp when the order was created
  updatedAt   DateTime      @updatedAt@map("updated_at") // Timestamp when the order was last updated

  user        User          @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship to User
  proudct     Product       @relation(fields: [productId],references: [productId],onDelete: Cascade)
  variation   Variation     @relation(fields: [variationId],references: [variationId],onDelete: Cascade)
}

model Stock {
  id             Int       @id @default(autoincrement())
  variationId    String    @unique@map("variation_id")
  productId      String    @map("product_id")
  quantity       Int
  threshold      Int       @default(5)
  location       String    @default("123 Main St.")

  @@unique([productId,variationId])

  product   Product     @relation(fields: [productId],references: [productId],onDelete: Cascade)
  variation Variation   @relation(fields: [variationId],references: [variationId],onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
}

enum KycStatus{
  PENDING
  APPROVED
  DENIED
}

